---
title: Transport emissions
subtitle: From Climate Trace
format:
  360-analysis-html: default
author: James Goldie
date: last-modified
code-fold: true
---

```{r}
#| label: setup
library(tidyverse)
library(httr2)
library(countrycode)
library(here)
```

[Climate Trace](https://climatetrace.org/) has sector and sub-sector greenhouse gas emissions for countries, so we can use it to show:

- How much of each country's total emissions is transport, and
- How transport is broken down further in each country

Rather than [downloading each country's data individually](https://climatetrace.org/data), let's use the [API](https://api.climatetrace.org/v4) to get them. 

Climate Trace's API is pretty neat! All of the endpoints return JSON that is neat enough to convert straight to a data frame, so I'll write one function to handle all of them with `{httr2}`.

We'll use the [`/country/emissions`](https://api.climatetrace.org/v4/swagger/index.html#tag/countries/get/v4/country/emissions) endpoint, which takes query parameters for its options:

- `since`
- `to`
- `sectors`: note that this is not `sector` (API docs are wrong)
- `subsectors`
- `countries`: comma-separated list of 3-letter country codes
- `continents`: comma-separated list of continents
- `groups`: comma-separated list of country groups

We'll get the codes we need to filter our output from the definitions endpoints below.

```{r}
#| label: api-options
year_since <- 2022
year_to <- 2022
```


```{r}
#| label: get-data-function
#' get_climatetrace_data: get data from a climate trace api endpoint.
#' 
#' @param endpoint An API endpoint string, like "/country/emissions". Excludes
#'   the API version number, `/v4`.
#' @param ... Query string parameters keys and values, like
#'   sector = "transportation".
get_climatetrace_data <- function(endpoint, ...) {
  request("https://api.climatetrace.org") |>
    req_url_path("/v4") |>
    req_url_path_append(endpoint) |>
    req_url_query(...) |>
    req_throttle(1 / 2) |>
    req_perform() |>
    resp_body_json(simplifyVector = TRUE) |>
    as_tibble()
}
```

```{r}
#| label: get-def-data
tr_sector_list    <- get_climatetrace_data("/definitions/sectors") 
tr_subsector_list <- get_climatetrace_data("/definitions/subsectors")
tr_country_list   <- get_climatetrace_data("/definitions/countries")

# let's see the sector and subsector lists
tr_sector_list    |> print(n = Inf)
tr_subsector_list |> print(n = Inf)
```

```{r}
#| label: get-emissions-data
# squash the country code list into a comma-separated string
tr_country_list |>
  pull(alpha3) |>
  paste(collapse = ",") ->
country_string

# get total emissions
"/country/emissions" |>
  get_climatetrace_data(
    countries = country_string,
    since = year_since,
    to = year_to) |>
  unpack(
    cols = c(emissions, worldEmissions, emissionsChange),
    names_sep = "_") |>
  mutate(sector = "All emissions") ->
tr_all

# now transport emissions
"/country/emissions" |>
  get_climatetrace_data(
    countries = country_string,
    sectors = "transportation",
    since = year_since,
    to = year_to) |>
  unpack(
    cols = c(emissions, worldEmissions, emissionsChange),
    names_sep = "_") |>
  mutate(sector = "All transport emissions") ->
tr_transport
```

One gotcha for the emissions endpoint is that, unlike the country parameters, the subsectors endpoint (and probably the sector one, but we're only doing one sector) doesn't return data for _each_ of themâ€”rather it seems to return aggregated figures for all the requested subsectors.

That means we need to request each subsector individually.

```{r}
#| label: get-subsector-emissions
requested_subsectors <- c(
  "domestic-aviation", 
  "domestic-shipping", 
  "domestic-shipping-ship", 
  "international-aviation", 
  "international-shipping", 
  "international-shipping-ship", 
  "railways", 
  "road-transportation", 
  "road-transportation-road-segment")

tr_subsector_list |>
  rename(sector = value) |>
  filter(sector %in% requested_subsectors) |>
  mutate(data = map(sector,
    ~ get_climatetrace_data("/country/emissions",
        subsectors = .x,
        countries = country_string,
        since = year_since,
        to = year_to,
      .progress = TRUE))) |>
  unnest(data) |>
    unpack(
      cols = c(emissions, worldEmissions, emissionsChange),
      names_sep = "_") ->
tr_subsectors
```

Now we can tidy and combine the figures.

```{r}
#| label: sum-subsectors
bind_rows(
  tr_all        |> select(sector, country, emissions_co2e_100yr),
  tr_transport  |> select(sector, country, emissions_co2e_100yr),
  tr_subsectors |> select(sector, country, emissions_co2e_100yr)) |>
  rename(emissions = emissions_co2e_100yr) |>
  mutate(sector = str_replace_all(str_to_sentence(sector), "-", " ")) ->
tr_combined

tr_combined |>
  pivot_wider(names_from = sector, values_from = emissions) |>
  mutate(
    iso2 = countrycode(country, "iso3c", "iso2c"),
    name = countrycode(country, "iso3c", "country.name.en")) |>
  select(iso2, iso3 = country, name, everything()) |>
  write_csv(here("data", "transport-emissions.csv")) |>
  print() ->
tr_combined_wide
```

# Population

Finally, let's merge population data in. We'll get these from the [UN Population Division](https://population.un.org).


```{r}
#| label: get-population
here("data", "raw", "population.csv") |>
  read_csv() |>
  select(iso2 = ISO2_code, iso3 = ISO3_code, Location, Time,
    TPopulation1July) |>
  filter(Time == 2022, !is.na(iso3)) ->
population

# merge the population data and calculate per capita figures
# alongside gross ones
tr_combined_wide |>
  rename_with(~ paste0("gross_", .x), where(is.double)) |>
  left_join(population, join_by(iso3)) |>
  select(-iso2.y, -Location, -Time) |>
  rename(population = TPopulation1July, iso2 = iso2.x) |>
  mutate(across(where(is.double), ~ .x / population,
    .names = "percapita_{.col}")) |>
  rename_with(~ str_replace(.x, "percapita_gross_", "percapita_")) |>
  select(-population, -percapita_population) |>
  write_csv(here("data", "transport-emissions.csv"), na = "") |>
  print() ->
tr_combined_percapita
```